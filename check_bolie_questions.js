// Script para verificar as quest√µes do teste BOLIE
// Este script verifica se existem quest√µes cadastradas no banco de dados

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkBolieQuestions() {
  console.log('üîç VERIFICANDO QUEST√ïES DO TESTE BOLIE')
  console.log('='.repeat(50))
  
  try {
    // 1. Buscar o teste BOLIE
    console.log('\n1. üîç Buscando teste BOLIE...')
    const bolieTest = await prisma.test.findFirst({
      where: {
        OR: [
          { name: { contains: 'BOLIE' } },
          { description: { contains: 'BOLIE' } },
          { id: 'cmehdpsox000o8wc0yuai0swa' }
        ]
      },
      include: {
        questions: {
          orderBy: {
            questionNumber: 'asc'
          }
        }
      }
    })
    
    if (!bolieTest) {
      console.log('‚ùå Teste BOLIE n√£o encontrado!')
      return
    }
    
    console.log('‚úÖ Teste BOLIE encontrado:', {
      id: bolieTest.id,
      name: bolieTest.name,
      isActive: bolieTest.isActive,
      questionsCount: bolieTest.questions?.length || 0
    })
    
    // 2. Verificar quest√µes
    console.log('\n2. üìã Verificando quest√µes cadastradas...')
    
    if (!bolieTest.questions || bolieTest.questions.length === 0) {
      console.log('‚ùå PROBLEMA ENCONTRADO: Nenhuma quest√£o cadastrada para o teste BOLIE!')
      console.log('\nüîß SOLU√á√ÉO NECESS√ÅRIA:')
      console.log('   ‚Ä¢ O teste BOLIE precisa ter quest√µes cadastradas na tabela Question')
      console.log('   ‚Ä¢ Cada quest√£o deve ter um ID √∫nico (CUID) e referenciar o testId do BOLIE')
      console.log('   ‚Ä¢ As respostas do usu√°rio devem referenciar esses IDs de quest√£o')
      
      // Verificar se existem quest√µes √≥rf√£s
      console.log('\n3. üîç Verificando quest√µes √≥rf√£s...')
      const allQuestions = await prisma.question.findMany({
        include: {
          test: true
        }
      })
      
      console.log(`\nüìä Total de quest√µes no banco: ${allQuestions.length}`)
      
      if (allQuestions.length > 0) {
        console.log('\nüìã Quest√µes por teste:')
        const questionsByTest = {}
        allQuestions.forEach(q => {
          const testName = q.test.name || 'Sem nome'
          if (!questionsByTest[testName]) {
            questionsByTest[testName] = 0
          }
          questionsByTest[testName]++
        })
        
        Object.entries(questionsByTest).forEach(([testName, count]) => {
          console.log(`   ‚Ä¢ ${testName}: ${count} quest√µes`)
        })
      }
      
    } else {
      console.log(`‚úÖ ${bolieTest.questions.length} quest√µes encontradas:`)
      
      // Mostrar algumas quest√µes como exemplo
      const sampleQuestions = bolieTest.questions.slice(0, 5)
      sampleQuestions.forEach((q, index) => {
        console.log(`\n   ${index + 1}. Quest√£o ${q.questionNumber}:`)
        console.log(`      ID: ${q.id}`)
        console.log(`      Texto: ${q.questionText.substring(0, 80)}...`)
        console.log(`      Tipo: ${q.questionType}`)
      })
      
      if (bolieTest.questions.length > 5) {
        console.log(`\n   ... e mais ${bolieTest.questions.length - 5} quest√µes`)
      }
      
      // Verificar IDs das quest√µes
      console.log('\nüìã IDs das quest√µes (primeiras 10):')
      const firstTenIds = bolieTest.questions.slice(0, 10).map(q => q.id)
      firstTenIds.forEach((id, index) => {
        console.log(`   Quest√£o ${index + 1}: ${id}`)
      })
    }
    
    // 3. Verificar sess√µes existentes do BOLIE
    console.log('\n4. üîç Verificando sess√µes existentes do BOLIE...')
    const bolieSessions = await prisma.testSession.findMany({
      where: {
        testId: bolieTest.id
      },
      include: {
        user: true,
        answers: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log(`\nüìä ${bolieSessions.length} sess√µes encontradas para o BOLIE:`)
    
    bolieSessions.forEach((session, index) => {
      console.log(`\n   ${index + 1}. Sess√£o ${session.id}:`)
      console.log(`      Usu√°rio: ${session.user.email}`)
      console.log(`      Status: ${session.status}`)
      console.log(`      Criada em: ${session.createdAt.toLocaleString()}`)
      console.log(`      Respostas: ${session.answers.length}`)
      
      if (session.answers.length > 0) {
        console.log(`      IDs das quest√µes respondidas: ${session.answers.slice(0, 3).map(a => a.questionId).join(', ')}...`)
      }
    })
    
    console.log('\n' + '='.repeat(50))
    console.log('üéØ DIAGN√ìSTICO COMPLETO:')
    
    if (!bolieTest.questions || bolieTest.questions.length === 0) {
      console.log('\n‚ùå PROBLEMA PRINCIPAL: TESTE SEM QUEST√ïES')
      console.log('   ‚Ä¢ O teste BOLIE existe no banco mas n√£o tem quest√µes cadastradas')
      console.log('   ‚Ä¢ Isso impede que as respostas sejam salvas (viola√ß√£o de chave estrangeira)')
      console.log('   ‚Ä¢ √â necess√°rio cadastrar as 45 quest√µes do BOLIE na tabela Question')
    } else {
      console.log('\n‚úÖ TESTE COM QUEST√ïES CADASTRADAS')
      console.log(`   ‚Ä¢ ${bolieTest.questions.length} quest√µes encontradas`)
      console.log('   ‚Ä¢ O problema pode estar na forma como as respostas s√£o enviadas')
      console.log('   ‚Ä¢ Verificar se os IDs das quest√µes nas respostas correspondem aos IDs reais')
    }
    
  } catch (error) {
    console.error('\n‚ùå ERRO NA VERIFICA√á√ÉO:')
    console.error('Erro:', error.message)
    console.error('Stack:', error.stack)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar a verifica√ß√£o
checkBolieQuestions()
  .then(() => {
    console.log('\n‚úÖ Verifica√ß√£o finalizada')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro fatal:', error)
    process.exit(1)
  })