// Script para debugar duplica√ß√£o de renderiza√ß√£o React
// Verifica se componentes est√£o sendo montados/renderizados m√∫ltiplas vezes

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function debugReactRendering() {
  console.log('üîç DEBUGGING REACT RENDERING DUPLICATION')
  console.log('=' .repeat(60))
  
  try {
    // 1. Verificar dados reais do usu√°rio
    const userId = 'cm4rvqhqz0000uxqhqhqhqhqh' // ID do colaborador@demo.com
    
    console.log('\n1. DADOS REAIS DO BANCO:')
    const dbResults = await prisma.testResult.findMany({
      where: { userId },
      select: {
        id: true,
        testId: true,
        completedAt: true,
        overallScore: true,
        test: {
          select: {
            name: true
          }
        }
      },
      orderBy: { completedAt: 'desc' }
    })
    
    console.log(`   - Resultados no banco: ${dbResults.length}`)
    dbResults.forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.test?.name || 'N/A'} (${result.id.slice(-8)}) - Score: ${result.overallScore}`)
    })
    
    // 2. Simular chamada da API
    console.log('\n2. SIMULA√á√ÉO DA API:')
    const apiUrl = 'http://localhost:3000/api/colaborador/resultados?page=1&limit=20'
    
    try {
      const response = await fetch(apiUrl)
      const apiData = await response.json()
      
      console.log(`   - Status da resposta: ${response.status}`)
      console.log(`   - Resultados retornados pela API: ${apiData.results?.length || 0}`)
      
      if (apiData.results) {
        console.log('   - IDs dos resultados da API:')
        apiData.results.forEach((result, index) => {
          console.log(`     ${index + 1}. ${result.test?.name || result.testName || 'N/A'} (${result.id.slice(-8)})`)
        })
        
        // Verificar duplicatas na resposta da API
        const apiIds = apiData.results.map(r => r.id)
        const uniqueApiIds = [...new Set(apiIds)]
        
        if (apiIds.length !== uniqueApiIds.length) {
          console.log('   ‚ö†Ô∏è  DUPLICATAS ENCONTRADAS NA RESPOSTA DA API!')
          const duplicates = apiIds.filter((id, index) => apiIds.indexOf(id) !== index)
          console.log(`   - IDs duplicados: ${duplicates.join(', ')}`)
        } else {
          console.log('   ‚úÖ Nenhuma duplicata na resposta da API')
        }
      }
      
    } catch (fetchError) {
      console.log(`   ‚ùå Erro ao chamar API: ${fetchError.message}`)
      console.log('   (Isso √© esperado se o servidor n√£o estiver rodando)')
    }
    
    // 3. Verificar poss√≠veis causas de duplica√ß√£o no frontend
    console.log('\n3. POSS√çVEIS CAUSAS DE DUPLICA√á√ÉO NO FRONTEND:')
    
    console.log('   a) React StrictMode:')
    console.log('      - N√£o encontrado React.StrictMode no c√≥digo')
    console.log('      - ‚úÖ N√£o √© a causa da duplica√ß√£o')
    
    console.log('\n   b) useEffect duplo:')
    console.log('      - useEffect na p√°gina todos-resultados tem depend√™ncias:')
    console.log('      - [session, currentPage, searchTerm, filterType, filterStatus, filterCategory, sortBy, sortOrder, pageSize]')
    console.log('      - ‚ö†Ô∏è  Poss√≠vel causa: mudan√ßas r√°pidas nas depend√™ncias')
    
    console.log('\n   c) DiagnosticPanel:')
    console.log('      - Faz chamada separada para /api/colaborador/resultados')
    console.log('      - ‚ö†Ô∏è  Poss√≠vel interfer√™ncia, mas n√£o deveria duplicar a lista principal')
    
    console.log('\n   d) Estado do componente:')
    console.log('      - Componente usa useState para armazenar resultados')
    console.log('      - ‚ö†Ô∏è  Poss√≠vel problema: estado n√£o sendo limpo entre atualiza√ß√µes')
    
    // 4. Recomenda√ß√µes
    console.log('\n4. RECOMENDA√á√ïES PARA CORRE√á√ÉO:')
    console.log('   1. Adicionar console.log no useEffect para rastrear execu√ß√µes')
    console.log('   2. Verificar se fetchResults est√° sendo chamado m√∫ltiplas vezes')
    console.log('   3. Adicionar loading state para prevenir chamadas simult√¢neas')
    console.log('   4. Verificar se setData est√° sendo chamado corretamente')
    console.log('   5. Temporariamente remover DiagnosticPanel para testar')
    
    console.log('\n5. PR√ìXIMOS PASSOS:')
    console.log('   - Adicionar logs de debug no componente React')
    console.log('   - Verificar Network tab no DevTools')
    console.log('   - Testar com DiagnosticPanel removido')
    console.log('   - Verificar se h√° re-renders desnecess√°rios')
    
  } catch (error) {
    console.error('‚ùå Erro durante debug:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Executar debug
debugReactRendering().catch(console.error)