const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function checkUserCredentials() {
  console.log('üîç Verificando credenciais do usu√°rio...');
  
  try {
    // 1. Buscar usu√°rio por email
    console.log('\n1. üîç Buscando usu√°rio colaborador@demo.com...');
    const user = await prisma.user.findUnique({
      where: {
        email: 'colaborador@demo.com'
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        password: true,
        userType: true,
        isActive: true,
        createdAt: true,
        lastLoginAt: true
      }
    });
    
    if (!user) {
      console.log('   ‚ùå Usu√°rio n√£o encontrado');
      return;
    }
    
    console.log('   ‚úÖ Usu√°rio encontrado:');
    console.log('   - ID:', user.id);
    console.log('   - Email:', user.email);
    console.log('   - Nome:', user.firstName + ' ' + user.lastName);
    console.log('   - Tipo:', user.userType);
    console.log('   - Ativo:', user.isActive);
    console.log('   - Criado em:', user.createdAt);
    console.log('   - √öltimo login:', user.lastLoginAt);
    console.log('   - Hash da senha:', user.password ? 'Presente' : 'Ausente');
    
    if (!user.password) {
      console.log('   ‚ùå Usu√°rio n√£o tem senha definida');
      return;
    }
    
    // 2. Testar senhas comuns
    const senhasParaTestar = ['demo123', '123456', 'password', 'colaborador', 'demo', ''];
    
    console.log('\n2. üîê Testando senhas comuns...');
    
    for (const senha of senhasParaTestar) {
      console.log(`   Testando senha: "${senha}"`);
      const isValid = await bcrypt.compare(senha, user.password);
      
      if (isValid) {
        console.log(`   ‚úÖ Senha correta encontrada: "${senha}"`);
        
        // 3. Testar login com a senha correta
        console.log('\n3. üîê Testando autentica√ß√£o completa...');
        
        // Simular o processo de autentica√ß√£o do NextAuth
        const authResult = {
          user: {
            id: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            userType: user.userType
          },
          passwordValid: true
        };
        
        console.log('   ‚úÖ Autentica√ß√£o simulada bem-sucedida:', JSON.stringify(authResult, null, 2));
        return;
      }
    }
    
    console.log('   ‚ùå Nenhuma das senhas testadas funcionou');
    console.log('   Hash da senha no banco:', user.password.substring(0, 20) + '...');
    
    // 4. Criar nova senha para o usu√°rio
    console.log('\n4. üîß Criando nova senha "demo123" para o usu√°rio...');
    const newPasswordHash = await bcrypt.hash('demo123', 12);
    
    await prisma.user.update({
      where: {
        id: user.id
      },
      data: {
        password: newPasswordHash
      }
    });
    
    console.log('   ‚úÖ Nova senha "demo123" definida para o usu√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserCredentials();