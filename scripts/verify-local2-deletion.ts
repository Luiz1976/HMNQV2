// Script para verificar se todos os arquivos JSON do Local 2 foram exclu√≠dos
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);

class Local2Verifier {
  private resultsDir = './archives/results';

  async getAllJsonFiles(dir: string): Promise<string[]> {
    const files: string[] = [];
    
    try {
      const items = await readdir(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = await stat(fullPath);
        
        if (stats.isDirectory()) {
          const subFiles = await this.getAllJsonFiles(fullPath);
          files.push(...subFiles);
        } else if (item.endsWith('.json') && !item.startsWith('.')) {
          files.push(fullPath);
        }
      }
    } catch (error) {
      console.log(`Diret√≥rio n√£o encontrado: ${dir}`);
    }
    
    return files;
  }

  async verifyDeletion(): Promise<void> {
    console.log('üîç VERIFICA√á√ÉO DE EXCLUS√ÉO DO LOCAL 2');
    console.log('=' .repeat(50));
    
    try {
      const remainingFiles = await this.getAllJsonFiles(this.resultsDir);
      
      console.log(`\nüìä Resultado da verifica√ß√£o:`);
      console.log(`üìÅ Arquivos JSON encontrados: ${remainingFiles.length}`);
      
      if (remainingFiles.length === 0) {
        console.log('\n‚úÖ SUCESSO: Todos os arquivos JSON foram exclu√≠dos do Local 2!');
        console.log('üóëÔ∏è  O Local 2 est√° completamente limpo');
        console.log('üíæ Backup dispon√≠vel para recupera√ß√£o se necess√°rio');
      } else {
        console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem arquivos JSON no Local 2:');
        remainingFiles.forEach((file, index) => {
          console.log(`${index + 1}. ${file}`);
        });
      }
      
      // Verificar estrutura de diret√≥rios
      console.log('\nüìÇ Estrutura de diret√≥rios restante:');
      await this.showDirectoryStructure(this.resultsDir, 0);
      
    } catch (error) {
      console.error('‚ùå Erro durante a verifica√ß√£o:', error);
    }
  }

  async showDirectoryStructure(dir: string, level: number): Promise<void> {
    try {
      const items = await readdir(dir);
      const indent = '  '.repeat(level);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = await stat(fullPath);
        
        if (stats.isDirectory()) {
          console.log(`${indent}üìÅ ${item}/`);
          await this.showDirectoryStructure(fullPath, level + 1);
        } else {
          const icon = item.endsWith('.json') ? 'üìÑ' : 'üìã';
          console.log(`${indent}${icon} ${item}`);
        }
      }
    } catch (error) {
      console.log(`${' '.repeat(level * 2)}‚ùå Erro ao ler diret√≥rio: ${dir}`);
    }
  }
}

// Executar verifica√ß√£o
async function main() {
  const verifier = new Local2Verifier();
  await verifier.verifyDeletion();
}

main().catch(console.error);