const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanDatabase() {
  console.log('üßπ Iniciando limpeza do banco de dados...');
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover TODOS os dados exceto o usu√°rio admin@humaniq.ai');
  
  try {
    // 1. Deletar dados relacionados a testes (em ordem para respeitar foreign keys)
    console.log('\nüìä Removendo dados de testes...');
    
    await prisma.aIAnalysis.deleteMany({});
    console.log('‚úÖ AIAnalysis removidas');
    
    await prisma.answer.deleteMany({});
    console.log('‚úÖ Answers removidas');
    
    await prisma.testResult.deleteMany({});
    console.log('‚úÖ TestResults removidos');
    
    await prisma.testSession.deleteMany({});
    console.log('‚úÖ TestSessions removidas');
    
    // 2. Deletar dados de ERP
    console.log('\nüîó Removendo dados de ERP...');
    
    await prisma.eRPEmployee.deleteMany({});
    console.log('‚úÖ ERPEmployees removidos');
    
    await prisma.eRPSyncLog.deleteMany({});
    console.log('‚úÖ ERPSyncLogs removidos');
    
    await prisma.eRPConfig.deleteMany({});
    console.log('‚úÖ ERPConfigs removidos');
    
    // 3. Deletar notifica√ß√µes
    console.log('\nüîî Removendo notifica√ß√µes...');
    
    await prisma.userNotification.deleteMany({});
    console.log('‚úÖ UserNotifications removidas');
    
    await prisma.companyNotification.deleteMany({});
    console.log('‚úÖ CompanyNotifications removidas');
    
    // 4. Deletar convites
    console.log('\nüìß Removendo convites...');
    
    await prisma.invitation.deleteMany({});
    console.log('‚úÖ Invitations removidos');
    
    // 5. Deletar sess√µes e contas do NextAuth (exceto do admin)
    console.log('\nüîê Removendo sess√µes e contas...');
    
    // Primeiro, obter o ID do usu√°rio admin
    const adminUser = await prisma.user.findUnique({
      where: { email: 'admin@humaniq.ai' }
    });
    
    if (!adminUser) {
      console.log('‚ùå Usu√°rio admin@humaniq.ai n√£o encontrado!');
      return;
    }
    
    console.log(`üë§ Admin encontrado: ${adminUser.id}`);
    
    // Deletar sess√µes de outros usu√°rios
    await prisma.session.deleteMany({
      where: {
        userId: {
          not: adminUser.id
        }
      }
    });
    console.log('‚úÖ Sessions de outros usu√°rios removidas');
    
    // Deletar contas de outros usu√°rios
    await prisma.account.deleteMany({
      where: {
        userId: {
          not: adminUser.id
        }
      }
    });
    console.log('‚úÖ Accounts de outros usu√°rios removidas');
    
    // 6. Deletar permiss√µes de outros usu√°rios
    await prisma.userPermission.deleteMany({
      where: {
        userId: {
          not: adminUser.id
        }
      }
    });
    console.log('‚úÖ UserPermissions de outros usu√°rios removidas');
    
    // 7. Deletar empresas (isso tamb√©m remove usu√°rios associados via cascade)
    console.log('\nüè¢ Removendo empresas...');
    
    await prisma.company.deleteMany({});
    console.log('‚úÖ Companies removidas');
    
    // 8. Deletar outros usu√°rios (exceto admin)
    console.log('\nüë• Removendo outros usu√°rios...');
    
    const deletedUsers = await prisma.user.deleteMany({
      where: {
        email: {
          not: 'admin@humaniq.ai'
        }
      }
    });
    console.log(`‚úÖ ${deletedUsers.count} usu√°rios removidos (exceto admin)`);
    
    // 9. Deletar tokens de verifica√ß√£o
    await prisma.verificationToken.deleteMany({});
    console.log('‚úÖ VerificationTokens removidos');
    
    // 10. Verificar se o admin ainda existe
    const adminCheck = await prisma.user.findUnique({
      where: { email: 'admin@humaniq.ai' }
    });
    
    if (adminCheck) {
      console.log('\n‚úÖ Usu√°rio admin@humaniq.ai preservado com sucesso!');
      console.log(`   ID: ${adminCheck.id}`);
      console.log(`   Nome: ${adminCheck.firstName} ${adminCheck.lastName}`);
      console.log(`   Tipo: ${adminCheck.userType}`);
    } else {
      console.log('\n‚ùå ERRO: Usu√°rio admin@humaniq.ai foi removido acidentalmente!');
    }
    
    // 11. Mostrar estat√≠sticas finais
    console.log('\nüìä Estat√≠sticas finais:');
    const userCount = await prisma.user.count();
    const companyCount = await prisma.company.count();
    const testResultCount = await prisma.testResult.count();
    const testSessionCount = await prisma.testSession.count();
    
    console.log(`   Usu√°rios restantes: ${userCount}`);
    console.log(`   Empresas restantes: ${companyCount}`);
    console.log(`   Resultados de testes: ${testResultCount}`);
    console.log(`   Sess√µes de testes: ${testSessionCount}`);
    
    console.log('\nüéâ Limpeza do banco de dados conclu√≠da com sucesso!');
    console.log('\nüìã Dados preservados:');
    console.log('   ‚úÖ Usu√°rio admin@humaniq.ai');
    console.log('   ‚úÖ Estruturas de tabelas');
    console.log('   ‚úÖ Categorias de testes (TestCategory)');
    console.log('   ‚úÖ Testes p√∫blicos (Test)');
    console.log('   ‚úÖ Quest√µes dos testes (Question)');
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  cleanDatabase()
    .then(() => {
      console.log('\n‚úÖ Script executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
      process.exit(1);
    });
}

module.exports = { cleanDatabase };