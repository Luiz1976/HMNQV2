const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function compareUserTests() {
  try {
    console.log('üîç Comparando testes do banco com a lista fornecida pelo usu√°rio...')
    
    // Buscar todos os testes do banco
    const testsFromDB = await prisma.test.findMany({
      include: {
        category: true
      },
      orderBy: { name: 'asc' }
    })
    
    console.log(`\nüìã Testes encontrados no banco: ${testsFromDB.length}`)
    
    // Lista fornecida pelo usu√°rio
    const userProvidedTests = [
      // 1. Testes Psicossociais
      'HumaniQ Insight ‚Äì Clima Organizacional e Bem-Estar Psicol√≥gico',
      'HumaniQ COBE ‚Äì Clima Organizacional e Bem-Estar Psicol√≥gico',
      'HumaniQ QVT ‚Äì Qualidade de Vida no Trabalho',
      'HumaniQ Karasek-Siegrist ‚Äì Teste Psicossocial Avan√ßado',
      'HumaniQ RPO ‚Äì Riscos Psicossociais Ocupacionais',
      'HumaniQ EO ‚Äì Estresse Ocupacional, Burnout e Resili√™ncia',
      'HumaniQ PAS ‚Äì Percep√ß√£o de Ass√©dio Moral e Sexual',
      'HumaniQ MGRP ‚Äì Maturidade em Gest√£o de Riscos Psicossociais',
      
      // 2. Testes de Perfil
      'HumaniQ QI ‚Äì Quociente de Intelig√™ncia',
      'HumaniQ TAR ‚Äì Teste de Aten√ß√£o e Racioc√≠nio',
      'HumaniQ TIPOS ‚Äì Perfil Cognitivo (MBTI)',
      'HumaniQ Big Five ‚Äì Cinco Grandes Fatores da Personalidade',
      'HumaniQ Eneagrama ‚Äì Tipos de Personalidade',
      'HumaniQ Valores ‚Äì Mapa de Valores Pessoais e Profissionais',
      'HumaniQ MOTIVA ‚Äì Perfil de Motiva√ß√£o Profissional',
      'HumaniQ BOLIE ‚Äì Intelig√™ncia Emocional',
      'HumaniQ FLEX ‚Äì Avalia√ß√£o de Adaptabilidade',
      
      // 3. Testes Corporativos
      'HumaniQ LIDERA ‚Äì Estilos e Compet√™ncias de Lideran√ßa',
      'HumaniQ TELA ‚Äì Teste de Lideran√ßa Aut√™ntica'
    ]
    
    console.log(`\nüìä Testes fornecidos pelo usu√°rio: ${userProvidedTests.length}`)
    
    // Comparar nomes dos testes
    const dbTestNames = testsFromDB.map(t => t.name)
    
    console.log('\nüîç An√°lise detalhada:')
    console.log('\n--- TESTES NO BANCO ---')
    testsFromDB.forEach(test => {
      console.log(`‚úÖ ${test.name} (${test.category.name})`)
    })
    
    console.log('\n--- TESTES FORNECIDOS PELO USU√ÅRIO ---')
    userProvidedTests.forEach(testName => {
      const found = dbTestNames.some(dbName => {
        // Verificar correspond√™ncia exata ou similar
        return dbName === testName || 
               dbName.includes(testName.split(' ‚Äì')[0]) || 
               testName.includes(dbName.split(' ‚Äì')[0])
      })
      
      if (found) {
        console.log(`‚úÖ ${testName} (ENCONTRADO)`)
      } else {
        console.log(`‚ùå ${testName} (N√ÉO ENCONTRADO)`)
      }
    })
    
    // Identificar testes faltando
    const missingTests = userProvidedTests.filter(userTest => {
      return !dbTestNames.some(dbName => {
        return dbName === userTest || 
               dbName.includes(userTest.split(' ‚Äì')[0]) || 
               userTest.includes(dbName.split(' ‚Äì')[0])
      })
    })
    
    // Identificar testes extras no banco
    const extraTests = dbTestNames.filter(dbTest => {
      return !userProvidedTests.some(userTest => {
        return dbTest === userTest || 
               dbTest.includes(userTest.split(' ‚Äì')[0]) || 
               userTest.includes(dbTest.split(' ‚Äì')[0])
      })
    })
    
    console.log('\nüìà RESUMO DA COMPARA√á√ÉO:')
    console.log(`Testes no banco: ${testsFromDB.length}`)
    console.log(`Testes fornecidos pelo usu√°rio: ${userProvidedTests.length}`)
    console.log(`Testes faltando: ${missingTests.length}`)
    console.log(`Testes extras no banco: ${extraTests.length}`)
    
    if (missingTests.length > 0) {
      console.log('\n‚ùå TESTES FALTANDO NO BANCO:')
      missingTests.forEach(test => console.log(`  - ${test}`))
    }
    
    if (extraTests.length > 0) {
      console.log('\n‚ûï TESTES EXTRAS NO BANCO (n√£o mencionados pelo usu√°rio):')
      extraTests.forEach(test => console.log(`  - ${test}`))
    }
    
    if (missingTests.length === 0) {
      console.log('\n‚úÖ Todos os testes fornecidos pelo usu√°rio est√£o presentes no banco!')
      console.log('\nüîç POSS√çVEL CAUSA DO PROBLEMA:')
      console.log('Se ainda aparecem dados fict√≠cios na p√°gina, o problema pode estar:')
      console.log('1. Na renderiza√ß√£o do componente frontend')
      console.log('2. Em dados mockados/hardcoded no c√≥digo')
      console.log('3. Em cache do navegador')
      console.log('4. Na API n√£o estar retornando os dados corretos')
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao comparar testes:', error)
  } finally {
    await prisma.$disconnect()
  }
}

compareUserTests()