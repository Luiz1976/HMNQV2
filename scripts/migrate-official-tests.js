const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// Lista oficial de 22 testes HumaniQ AI
const OFFICIAL_TESTS = [
  {
    name: 'HumaniQ Insight ‚Äì Clima Organizacional e Bem-Estar Psicol√≥gico',
    code: 'humaniq_insight',
    description: 'Avalia√ß√£o do clima organizacional e bem-estar psicol√≥gico dos colaboradores',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ COBE ‚Äì Clima Organizacional e Bem-Estar Psicol√≥gico',
    code: 'humaniq_cobe',
    description: 'An√°lise do clima organizacional e bem-estar psicol√≥gico',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ QVT ‚Äì Qualidade de Vida no Trabalho',
    code: 'humaniq_qvt',
    description: 'Avalia√ß√£o da qualidade de vida no ambiente de trabalho',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ Karasek-Siegrist ‚Äì Teste Psicossocial Avan√ßado',
    code: 'humaniq_karasek_siegrist',
    description: 'Teste psicossocial avan√ßado baseado no modelo Karasek-Siegrist',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ RPO ‚Äì Riscos Psicossociais Ocupacionais',
    code: 'humaniq_rpo',
    description: 'Avalia√ß√£o de riscos psicossociais no ambiente ocupacional',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ EO ‚Äì Estresse Ocupacional, Burnout e Resili√™ncia',
    code: 'humaniq_eo',
    description: 'An√°lise de estresse ocupacional, burnout e n√≠veis de resili√™ncia',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ PAS ‚Äì Percep√ß√£o de Ass√©dio Moral e Sexual',
    code: 'humaniq_pas',
    description: 'Avalia√ß√£o da percep√ß√£o de ass√©dio moral e sexual no ambiente de trabalho',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ MGRP ‚Äì Maturidade em Gest√£o de Riscos Psicossociais',
    code: 'humaniq_mgrp',
    description: 'Avalia√ß√£o da maturidade organizacional em gest√£o de riscos psicossociais',
    testType: 'PSYCHOSOCIAL',
    category: 'Psicossociais'
  },
  {
    name: 'HumaniQ QI ‚Äì Quociente de Intelig√™ncia',
    code: 'humaniq_qi',
    description: 'Avalia√ß√£o do quociente de intelig√™ncia',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ TAR ‚Äì Teste de Aten√ß√£o e Racioc√≠nio',
    code: 'humaniq_tar',
    description: 'Avalia√ß√£o de capacidades de aten√ß√£o e racioc√≠nio',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ TIPOS ‚Äì Perfil Cognitivo (MBTI)',
    code: 'humaniq_tipos',
    description: 'Avalia√ß√£o do perfil cognitivo baseado no modelo MBTI',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ Big Five ‚Äì Cinco Grandes Fatores da Personalidade',
    code: 'humaniq_big_five',
    description: 'Avalia√ß√£o dos cinco grandes fatores da personalidade',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ Eneagrama ‚Äì Tipos de Personalidade',
    code: 'humaniq_eneagrama',
    description: 'Avalia√ß√£o de tipos de personalidade baseada no Eneagrama',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ Valores ‚Äì Mapa de Valores Pessoais e Profissionais',
    code: 'humaniq_valores',
    description: 'Mapeamento de valores pessoais e profissionais',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ MOTIVA ‚Äì Perfil de Motiva√ß√£o Profissional',
    code: 'humaniq_motiva',
    description: 'Avalia√ß√£o do perfil de motiva√ß√£o profissional',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ BOLIE ‚Äì Intelig√™ncia Emocional',
    code: 'humaniq_bolie',
    description: 'Avalia√ß√£o da intelig√™ncia emocional',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ FLEX ‚Äì Avalia√ß√£o de Adaptabilidade',
    code: 'humaniq_flex',
    description: 'Avalia√ß√£o da capacidade de adaptabilidade',
    testType: 'PERSONALITY',
    category: 'Perfil'
  },
  {
    name: 'HumaniQ LIDERA ‚Äì Estilos e Compet√™ncias de Lideran√ßa',
    code: 'humaniq_lidera',
    description: 'Avalia√ß√£o de estilos e compet√™ncias de lideran√ßa',
    testType: 'CORPORATE',
    category: 'Corporativos'
  },
  {
    name: 'HumaniQ TELA ‚Äì Teste de Lideran√ßa Aut√™ntica',
    code: 'humaniq_tela',
    description: 'Avalia√ß√£o de lideran√ßa aut√™ntica',
    testType: 'CORPORATE',
    category: 'Corporativos'
  },
  {
    name: 'HumaniQ Grafologia ‚Äì Teste Grafol√≥gico',
    code: 'humaniq_grafologia',
    description: 'An√°lise grafol√≥gica da personalidade atrav√©s da escrita',
    testType: 'GRAPHOLOGY',
    category: 'Grafol√≥gicos'
  },
  {
    name: 'HumaniQ Assinatura ‚Äì Teste Grafol√≥gico de Assinatura',
    code: 'humaniq_assinatura',
    description: 'An√°lise grafol√≥gica atrav√©s da assinatura',
    testType: 'GRAPHOLOGY',
    category: 'Grafol√≥gicos'
  }
]

async function migrateOfficialTests() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o para testes oficiais HumaniQ AI...')
    
    // 1. Backup dos testes existentes
    console.log('üìã Fazendo backup dos testes existentes...')
    const existingTests = await prisma.test.findMany({
      include: { category: true }
    })
    
    console.log(`Encontrados ${existingTests.length} testes existentes`)
    
    // 2. Desativar todos os testes existentes
    console.log('üö´ Desativando todos os testes existentes...')
    await prisma.test.updateMany({
      data: {
        isActive: false,
        isPublic: false
      }
    })
    
    // 3. Criar/atualizar categorias necess√°rias
    console.log('üìÅ Criando/atualizando categorias...')
    const categories = ['Psicossociais', 'Perfil', 'Corporativos', 'Grafol√≥gicos']
    const categoryMap = {}
    
    for (let i = 0; i < categories.length; i++) {
      const categoryName = categories[i]
      
      // Verificar se categoria j√° existe
      let category = await prisma.testCategory.findFirst({
        where: { name: categoryName }
      })
      
      if (category) {
         // Atualizar categoria existente
         category = await prisma.testCategory.update({
           where: { id: category.id },
           data: {
             isActive: true
           }
         })
       } else {
         // Criar nova categoria
         category = await prisma.testCategory.create({
           data: {
             name: categoryName,
             description: `Categoria ${categoryName}`,
             isActive: true
           }
         })
       }
      
      categoryMap[categoryName] = category.id
      console.log(`  ‚úÖ Categoria: ${categoryName} (ID: ${category.id})`)
    }
    
    // 4. Criar os 22 testes oficiais
    console.log('üß™ Criando os 22 testes oficiais...')
    
    for (let i = 0; i < OFFICIAL_TESTS.length; i++) {
      const testData = OFFICIAL_TESTS[i]
      
      // Verificar se teste j√° existe
      let test = await prisma.test.findFirst({
        where: { name: testData.name }
      })
      
      if (test) {
         // Atualizar teste existente
         test = await prisma.test.update({
           where: { id: test.id },
           data: {
             description: testData.description,
             testType: testData.testType,
             categoryId: categoryMap[testData.category],
             isActive: true,
             isPublic: true,
             estimatedDuration: 30,
             instructions: `Instru√ß√µes para ${testData.name}`
           }
         })
       } else {
         // Criar novo teste
         test = await prisma.test.create({
           data: {
             name: testData.name,
             description: testData.description,
             testType: testData.testType,
             categoryId: categoryMap[testData.category],
             isActive: true,
             isPublic: true,
             estimatedDuration: 30,
             instructions: `Instru√ß√µes para ${testData.name}`
           }
         })
       }
      
      console.log(`  ‚úÖ ${test.name} (ID: ${test.id})`)
    }
    
    // 5. Verificar resultado final
    console.log('\nüìä Verificando resultado final...')
    const finalTests = await prisma.test.findMany({
      where: { isActive: true },
      include: { category: true },
      orderBy: { name: 'asc' }
    })
    
    console.log(`\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!`)
    console.log(`\n‚úÖ Total de testes ativos: ${finalTests.length}`)
    console.log(`\nüß™ Testes oficiais HumaniQ AI:`)
    
    finalTests.forEach((test, index) => {
      console.log(`  ${index + 1}. ${test.name} (${test.category.name})`)
    })
    
    console.log('\nüîí Apenas estes testes est√£o agora dispon√≠veis no sistema!')
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar migra√ß√£o
migrateOfficialTests()
  .then(() => {
    console.log('\nüéâ Migra√ß√£o para testes oficiais HumaniQ AI conclu√≠da!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• Falha na migra√ß√£o:', error)
    process.exit(1)
  })