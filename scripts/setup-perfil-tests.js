const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

// Lista dos 9 testes espec√≠ficos para a categoria "Testes de Perfil"
const PERFIL_TESTS = [
  {
    name: 'HumaniQ QI ‚Äì Quociente de Intelig√™ncia',
    description: 'Avalia√ß√£o das capacidades cognitivas e intelectuais atrav√©s de testes de racioc√≠nio l√≥gico, verbal e num√©rico.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ TAR ‚Äì Teste de Aten√ß√£o e Racioc√≠nio',
    description: 'Avalia√ß√£o da capacidade de aten√ß√£o sustentada, concentra√ß√£o e racioc√≠nio l√≥gico.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ TIPOS ‚Äì Perfil Cognitivo (MBTI)',
    description: 'Identifica√ß√£o do tipo de personalidade baseado nas prefer√™ncias cognitivas (Myers-Briggs Type Indicator).',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ Big Five ‚Äì Cinco Grandes Fatores da Personalidade',
    description: 'Avalia√ß√£o dos cinco principais fatores de personalidade: Abertura, Conscienciosidade, Extrovers√£o, Amabilidade e Neuroticismo.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ Eneagrama ‚Äì Tipos de Personalidade',
    description: 'Identifica√ß√£o do tipo de personalidade baseado no sistema Eneagrama, revelando motiva√ß√µes e padr√µes comportamentais.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ Valores ‚Äì Mapa de Valores Pessoais e Profissionais',
    description: 'Mapeamento dos valores fundamentais que orientam decis√µes e comportamentos no ambiente pessoal e profissional.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ MOTIVA ‚Äì Perfil de Motiva√ß√£o Profissional',
    description: 'An√°lise dos fatores motivacionais que impulsionam o desempenho e engajamento profissional.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ BOLIE ‚Äì Intelig√™ncia Emocional',
    description: 'Avalia√ß√£o das compet√™ncias de intelig√™ncia emocional: autoconsci√™ncia, autorregula√ß√£o, motiva√ß√£o, empatia e habilidades sociais.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  },
  {
    name: 'HumaniQ FLEX ‚Äì Avalia√ß√£o de Adaptabilidade',
    description: 'Medi√ß√£o da capacidade de adapta√ß√£o a mudan√ßas, flexibilidade cognitiva e resili√™ncia em diferentes contextos.',
    testType: 'PERSONALITY',
    category: 'Testes de Perfil'
  }
]

async function setupPerfilTests() {
  try {
    console.log('üîß Configurando os 9 testes da categoria "Testes de Perfil"...')
    
    // Verificar se a categoria existe
    let perfilCategory = await prisma.testCategory.findFirst({
      where: { name: 'Testes de Perfil' }
    })
    
    if (!perfilCategory) {
      console.log('üìã Criando categoria "Testes de Perfil"...')
      perfilCategory = await prisma.testCategory.create({
        data: {
          name: 'Testes de Perfil',
          description: 'Avalia√ß√µes de personalidade, intelig√™ncia e compet√™ncias comportamentais',
          sortOrder: 2
        }
      })
    }
    
    console.log(`‚úÖ Categoria encontrada/criada: ${perfilCategory.name} (ID: ${perfilCategory.id})`)
    
    // Verificar quais testes j√° existem
    const existingTests = await prisma.test.findMany({
      where: {
        categoryId: perfilCategory.id
      }
    })
    
    console.log(`\nüìä Testes existentes na categoria: ${existingTests.length}`)
    existingTests.forEach(test => {
      console.log(`  - ${test.name}`)
    })
    
    // Adicionar/atualizar cada teste
    let addedCount = 0
    let updatedCount = 0
    
    for (const testData of PERFIL_TESTS) {
      const existingTest = await prisma.test.findFirst({
        where: {
          name: testData.name
        }
      })
      
      if (existingTest) {
        // Atualizar teste existente
        await prisma.test.update({
          where: { id: existingTest.id },
          data: {
            name: testData.name,
            description: testData.description,
            testType: testData.testType,
            categoryId: perfilCategory.id,
            isActive: true,
            isPublic: true
          }
        })
        console.log(`üîÑ Atualizado: ${testData.name}`)
        updatedCount++
      } else {
        // Criar novo teste
        await prisma.test.create({
          data: {
            name: testData.name,
            description: testData.description,
            testType: testData.testType,
            categoryId: perfilCategory.id,
            isActive: true,
            isPublic: true
          }
        })
        console.log(`‚ûï Adicionado: ${testData.name}`)
        addedCount++
      }
    }
    
    // Verificar resultado final
    const finalTests = await prisma.test.findMany({
      where: {
        categoryId: perfilCategory.id,
        isActive: true
      },
      orderBy: { name: 'asc' }
    })
    
    console.log(`\n‚úÖ Configura√ß√£o conclu√≠da!`)
    console.log(`üìä Resumo:`)
    console.log(`  - Testes adicionados: ${addedCount}`)
    console.log(`  - Testes atualizados: ${updatedCount}`)
    console.log(`  - Total de testes ativos na categoria: ${finalTests.length}`)
    
    console.log(`\nüìã Testes na categoria "Testes de Perfil":`)
    finalTests.forEach((test, index) => {
      console.log(`  ${index + 1}. ${test.name}`)
    })
    
    // Verificar se todos os 9 testes solicitados est√£o presentes
    const requiredTestNames = PERFIL_TESTS.map(t => t.name)
    const finalTestNames = finalTests.map(t => t.name)
    const missingTests = requiredTestNames.filter(name => !finalTestNames.includes(name))
    
    if (missingTests.length === 0) {
      console.log(`\nüéâ SUCESSO! Todos os 9 testes solicitados est√£o cadastrados e ativos na categoria "Testes de Perfil"!`)
    } else {
      console.log(`\n‚ö†Ô∏è Aten√ß√£o! Testes ainda faltando:`)
      missingTests.forEach(name => {
        console.log(`  - ${name}`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar testes de perfil:', error)
  } finally {
    await prisma.$disconnect()
  }
}

setupPerfilTests()