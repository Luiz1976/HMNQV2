const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanAIResults() {
  console.log('üßπ Iniciando limpeza dos resultados e an√°lises de IA do HumaniQ AI...');
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover APENAS os resultados de testes e an√°lises de IA');
  console.log('‚úÖ Usu√°rios, empresas e estrutura dos testes ser√£o preservados');
  
  try {
    // 1. Deletar an√°lises de IA
    console.log('\nü§ñ Removendo an√°lises de IA...');
    const aiAnalysisCount = await prisma.aIAnalysis.count();
    await prisma.aIAnalysis.deleteMany({});
    console.log(`‚úÖ ${aiAnalysisCount} an√°lises de IA removidas`);
    
    // 2. Deletar respostas dos testes
    console.log('\nüìù Removendo respostas dos testes...');
    const answersCount = await prisma.answer.count();
    await prisma.answer.deleteMany({});
    console.log(`‚úÖ ${answersCount} respostas removidas`);
    
    // 3. Deletar resultados de testes
    console.log('\nüìä Removendo resultados de testes...');
    const testResultsCount = await prisma.testResult.count();
    await prisma.testResult.deleteMany({});
    console.log(`‚úÖ ${testResultsCount} resultados de testes removidos`);
    
    // 4. Deletar sess√µes de testes
    console.log('\nüéØ Removendo sess√µes de testes...');
    const testSessionsCount = await prisma.testSession.count();
    await prisma.testSession.deleteMany({});
    console.log(`‚úÖ ${testSessionsCount} sess√µes de testes removidas`);
    
    // 5. Verificar estat√≠sticas finais
    console.log('\nüìä Verificando limpeza...');
    const remainingAI = await prisma.aIAnalysis.count();
    const remainingAnswers = await prisma.answer.count();
    const remainingResults = await prisma.testResult.count();
    const remainingSessions = await prisma.testSession.count();
    
    console.log(`   An√°lises de IA restantes: ${remainingAI}`);
    console.log(`   Respostas restantes: ${remainingAnswers}`);
    console.log(`   Resultados restantes: ${remainingResults}`);
    console.log(`   Sess√µes restantes: ${remainingSessions}`);
    
    // 6. Verificar dados preservados
    console.log('\nüìã Verificando dados preservados...');
    const userCount = await prisma.user.count();
    const companyCount = await prisma.company.count();
    const testCount = await prisma.test.count();
    const questionCount = await prisma.question.count();
    const categoryCount = await prisma.testCategory.count();
    
    console.log(`   Usu√°rios preservados: ${userCount}`);
    console.log(`   Empresas preservadas: ${companyCount}`);
    console.log(`   Testes preservados: ${testCount}`);
    console.log(`   Quest√µes preservadas: ${questionCount}`);
    console.log(`   Categorias preservadas: ${categoryCount}`);
    
    if (remainingAI === 0 && remainingAnswers === 0 && remainingResults === 0 && remainingSessions === 0) {
      console.log('\nüéâ LIMPEZA DE RESULTADOS REALIZADA COM SUCESSO!');
      console.log('   ‚úÖ Todas as an√°lises de IA foram removidas');
      console.log('   ‚úÖ Todos os resultados de testes foram removidos');
      console.log('   ‚úÖ Todas as respostas foram removidas');
      console.log('   ‚úÖ Todas as sess√µes de testes foram removidas');
      console.log('   ‚úÖ Estrutura dos testes e usu√°rios preservados');
    } else {
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Alguns dados podem n√£o ter sido removidos completamente');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza dos resultados:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  cleanAIResults()
    .then(() => {
      console.log('\n‚úÖ Script de limpeza de resultados executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
      process.exit(1);
    });
}

module.exports = { cleanAIResults };