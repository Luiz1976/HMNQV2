
import { withAuth } from 'next-auth/middleware'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export default withAuth(
  function middleware(req) {
    const { token } = req.nextauth
    const { pathname, search } = req.nextUrl
    const isRSCRequest = search.includes('_rsc=')

    // Reduzir logs em produção para melhor performance
    const shouldLog = process.env.NODE_ENV === 'development'
    
    if (shouldLog) {
      console.log('🔍 Middleware - Path:', pathname)
      console.log('🔍 Middleware - Has token:', !!token)
      console.log('🔍 Middleware - User type:', token?.user?.userType)
      console.log('🔍 Middleware - Is RSC:', isRSCRequest)
    }

    // Skip processing for RSC requests to prevent ERR_ABORTED
    if (isRSCRequest) {
      if (shouldLog) console.log('⚡ Skipping RSC request processing')
      return NextResponse.next()
    }

    // Skip processing for auth pages to prevent redirect loops
    if (pathname.startsWith('/auth/')) {
      if (shouldLog) console.log('🔐 Allowing auth page access')
      return NextResponse.next()
    }

    // Only handle authenticated users
    if (token) {
      const userType = token.user?.userType

      // Root dashboard redirect based on user type
      if (pathname === '/dashboard' || pathname === '/') {
        if (shouldLog) console.log('🔄 Root redirect for user type:', userType)
        
        switch (userType) {
          case 'ADMIN':
            if (shouldLog) console.log('➡️ Redirecting ADMIN to /admin/convites')
            return NextResponse.redirect(new URL('/admin/convites', req.url))
          case 'COMPANY':
            if (shouldLog) console.log('➡️ Redirecting COMPANY to /empresa')
            return NextResponse.redirect(new URL('/empresa', req.url))
          case 'EMPLOYEE':
          case 'CANDIDATE':
            if (shouldLog) console.log('➡️ Redirecting EMPLOYEE/CANDIDATE to /colaborador')
            return NextResponse.redirect(
              new URL('/colaborador', req.url),
            )
          default:
            if (shouldLog) console.log('❌ Unknown user type, redirecting to login')
            return NextResponse.redirect(new URL('/auth/login', req.url))
        }
      }
    }

    if (shouldLog) console.log('✅ Allowing access to:', pathname)
    return NextResponse.next()
  },
  {
    callbacks: {
      authorized: ({ token, req }) => {
        const { pathname } = req.nextUrl
        
        // Always allow access to auth pages to prevent redirect loops
        if (pathname.startsWith('/auth/')) {
          return true
        }
        
        // Allow access to public routes
        if (pathname.startsWith('/invite/') ||
            pathname.startsWith('/empresa/saude')) {
          return true
        }
        
        // Require token for all other routes
        return !!token
      },
    },
    pages: {
      signIn: '/auth/login',
    },
  }
)

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api/auth (NextAuth API routes - COMPLETELY EXCLUDED)
     * - api/tests (Test API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - Static assets
     */
    '/((?!api/auth|api/tests|_next/static|_next/image|favicon.ico|.*\.svg|.*\.png|.*\.jpg|.*\.jpeg|.*\.gif|.*\.webp|.*\.ico|.*\.css|.*\.js).*)',
  ],
}
