// Script para verificar se todos os 16 resultados realmente pertencem ao usu√°rio colaborador@demo.com
// Investiga: resultados no banco, arquivados, outros usu√°rios e filtragem da API

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function verifyResultsOwnership() {
  try {
    console.log('üîç === VERIFICA√á√ÉO DE PROPRIEDADE DOS 16 RESULTADOS ===');
    console.log('üìß Usu√°rio alvo: colaborador@demo.com');
    console.log('');

    // 1. Buscar o usu√°rio colaborador@demo.com
    const targetUser = await prisma.user.findUnique({
      where: { email: 'colaborador@demo.com' }
    });

    if (!targetUser) {
      console.log('‚ùå Usu√°rio colaborador@demo.com n√£o encontrado!');
      return;
    }

    console.log('‚úÖ Usu√°rio encontrado:');
    console.log(`   ID: ${targetUser.id}`);
    console.log(`   Nome: ${targetUser.firstName} ${targetUser.lastName}`);
    console.log(`   Email: ${targetUser.email}`);
    console.log('');

    // 2. Verificar TODOS os resultados no banco de dados para este usu√°rio
    const dbResults = await prisma.testResult.findMany({
      where: {
        userId: targetUser.id
      },
      include: {
        test: {
          include: {
            category: true
          }
        },
        user: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`üìä RESULTADOS NO BANCO DE DADOS: ${dbResults.length}`);
    console.log('');

    if (dbResults.length > 0) {
      console.log('üìã Detalhes dos resultados no banco:');
      dbResults.forEach((result, index) => {
        console.log(`   ${index + 1}. ID: ${result.id}`);
        console.log(`      Teste: ${result.test.name}`);
        console.log(`      Usu√°rio: ${result.user.email}`);
        console.log(`      Status: ${result.completedAt ? 'COMPLETED' : 'IN_PROGRESS'}`);
        console.log(`      Data: ${result.completedAt || result.createdAt}`);
        console.log(`      Score: ${result.overallScore || 'N/A'}`);
        console.log('');
      });
    }

    // 3. Verificar resultados arquivados
    console.log('üìÅ === VERIFICA√á√ÉO DE RESULTADOS ARQUIVADOS ===');
    
    const archivesPath = path.join(process.cwd(), 'archives', 'results');
    let archivedResults = [];
    
    if (fs.existsSync(archivesPath)) {
      const archiveFiles = fs.readdirSync(archivesPath)
        .filter(file => file.endsWith('.json'));
      
      console.log(`üìÅ Arquivos de arquivo encontrados: ${archiveFiles.length}`);
      
      for (const file of archiveFiles) {
        try {
          const filePath = path.join(archivesPath, file);
          const fileContent = fs.readFileSync(filePath, 'utf8');
          const archived = JSON.parse(fileContent);
          
          // Filtrar apenas resultados do usu√°rio alvo
          if (archived.userId === targetUser.id) {
            archivedResults.push({
              ...archived,
              fileName: file
            });
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Erro ao ler arquivo ${file}:`, error.message);
        }
      }
    } else {
      console.log('üìÅ Diret√≥rio de arquivos n√£o encontrado');
    }

    console.log(`üìÅ RESULTADOS ARQUIVADOS: ${archivedResults.length}`);
    console.log('');

    if (archivedResults.length > 0) {
      console.log('üìã Detalhes dos resultados arquivados:');
      archivedResults.forEach((result, index) => {
        console.log(`   ${index + 1}. ID: ${result.id}`);
        console.log(`      Teste: ${result.testName || 'N/A'}`);
        console.log(`      Arquivo: ${result.fileName}`);
        console.log(`      Data: ${result.completedAt}`);
        console.log(`      Score: ${result.overallScore || 'N/A'}`);
        console.log('');
      });
    }

    // 4. Verificar se h√° duplicatas entre banco e arquivos
    console.log('üîÑ === VERIFICA√á√ÉO DE DUPLICATAS ===');
    
    const dbResultIds = new Set(dbResults.map(r => r.id));
    const archivedResultIds = new Set(archivedResults.map(r => r.id));
    
    const duplicateIds = [...dbResultIds].filter(id => archivedResultIds.has(id));
    
    console.log(`üîÑ IDs duplicados entre banco e arquivos: ${duplicateIds.length}`);
    if (duplicateIds.length > 0) {
      console.log('   Duplicatas:', duplicateIds);
    }
    console.log('');

    // 5. Verificar outros usu√°rios no sistema
    console.log('üë• === VERIFICA√á√ÉO DE OUTROS USU√ÅRIOS ===');
    
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        _count: {
          select: {
            testResults: true
          }
        }
      },
      orderBy: {
        email: 'asc'
      }
    });

    console.log(`üë• Total de usu√°rios no sistema: ${allUsers.length}`);
    console.log('');
    
    console.log('üìä Usu√°rios e seus resultados:');
    allUsers.forEach((user, index) => {
      const isTarget = user.email === 'colaborador@demo.com';
      const marker = isTarget ? 'üéØ' : '  ';
      console.log(`${marker} ${index + 1}. ${user.email}`);
      console.log(`      Nome: ${user.firstName || 'N/A'} ${user.lastName || 'N/A'}`);
      console.log(`      Resultados: ${user._count.testResults}`);
      if (isTarget) {
        console.log(`      ‚≠ê USU√ÅRIO ALVO`);
      }
      console.log('');
    });

    // 6. Verificar se h√° resultados com userId inv√°lido
    console.log('üîç === VERIFICA√á√ÉO DE RESULTADOS COM USERID INV√ÅLIDO ===');
    
    const allResultsWithUsers = await prisma.testResult.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true
          }
        },
        test: {
          select: {
            name: true
          }
        }
      }
    });

    const invalidResults = allResultsWithUsers.filter(result => !result.user);
    
    console.log(`üîç Resultados com userId inv√°lido: ${invalidResults.length}`);
    if (invalidResults.length > 0) {
      invalidResults.forEach((result, index) => {
        console.log(`   ${index + 1}. ID: ${result.id}, Teste: ${result.test?.name || 'N/A'}`);
      });
    }
    console.log('');

    // 7. Simular a resposta da API (como ela combina resultados)
    console.log('üîÑ === SIMULA√á√ÉO DA RESPOSTA DA API ===');
    
    // Filtrar arquivados que n√£o est√£o no banco (l√≥gica da API)
    const uniqueArchivedResults = archivedResults.filter(archived => 
      !dbResultIds.has(archived.id)
    );
    
    const totalCombinedResults = dbResults.length + uniqueArchivedResults.length;
    
    console.log(`üìä Simula√ß√£o da combina√ß√£o de resultados:`);
    console.log(`   Resultados do banco: ${dbResults.length}`);
    console.log(`   Resultados arquivados √∫nicos: ${uniqueArchivedResults.length}`);
    console.log(`   Total combinado (como na API): ${totalCombinedResults}`);
    console.log('');

    // 8. An√°lise final
    console.log('üìã === AN√ÅLISE FINAL ===');
    console.log(`üéØ Usu√°rio alvo: colaborador@demo.com (ID: ${targetUser.id})`);
    console.log(`üìä Resultados no banco: ${dbResults.length}`);
    console.log(`üìÅ Resultados arquivados: ${archivedResults.length}`);
    console.log(`üîÑ Duplicatas: ${duplicateIds.length}`);
    console.log(`üìã Total esperado pela API: ${totalCombinedResults}`);
    console.log(`üñ•Ô∏è Total mostrado na interface: 16`);
    console.log('');

    if (totalCombinedResults === 16) {
      console.log('‚úÖ CONCLUS√ÉO: Os 16 resultados na interface correspondem exatamente aos dados do usu√°rio!');
      console.log('   - Todos os resultados pertencem ao usu√°rio colaborador@demo.com');
      console.log('   - A API est√° funcionando corretamente');
      console.log('   - O problema pode estar na renderiza√ß√£o dupla do frontend');
    } else if (totalCombinedResults === 8) {
      console.log('‚ö†Ô∏è CONCLUS√ÉO: H√° uma discrep√¢ncia!');
      console.log('   - API deveria retornar 8 resultados');
      console.log('   - Interface mostra 16 resultados');
      console.log('   - Prov√°vel duplica√ß√£o no frontend (renderiza√ß√£o dupla)');
    } else {
      console.log('‚ùì CONCLUS√ÉO: Situa√ß√£o inesperada!');
      console.log(`   - API deveria retornar ${totalCombinedResults} resultados`);
      console.log('   - Interface mostra 16 resultados');
      console.log('   - Necess√°ria investiga√ß√£o adicional');
    }

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar verifica√ß√£o
verifyResultsOwnership().catch(console.error);