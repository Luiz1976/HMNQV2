const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

// Fun√ß√£o para ler resultados arquivados (mesma l√≥gica da API)
function readArchivedResults(userId) {
  try {
    const archiveBasePath = path.join(process.cwd(), 'archives', 'results')
    let allArchivedResults = []
    
    // Percorrer estrutura de diret√≥rios por ano/m√™s/tipo
    const years = fs.readdirSync(archiveBasePath).filter(item => {
      const fullPath = path.join(archiveBasePath, item)
      return fs.statSync(fullPath).isDirectory()
    })
    
    for (const year of years) {
      const yearPath = path.join(archiveBasePath, year)
      const months = fs.readdirSync(yearPath).filter(item => {
        const fullPath = path.join(yearPath, item)
        return fs.statSync(fullPath).isDirectory()
      })
      
      for (const month of months) {
        const monthPath = path.join(yearPath, month)
        const testTypes = fs.readdirSync(monthPath).filter(item => {
          const fullPath = path.join(monthPath, item)
          return fs.statSync(fullPath).isDirectory()
        })
        
        for (const testType of testTypes) {
          const testTypePath = path.join(monthPath, testType)
          const files = fs.readdirSync(testTypePath).filter(file => 
            file.includes(userId) && file.endsWith('.json')
          )
          
          for (const file of files) {
            try {
              const filePath = path.join(testTypePath, file)
              const data = fs.readFileSync(filePath, 'utf8')
              const archivedResult = JSON.parse(data)
              allArchivedResults.push(archivedResult)
            } catch (fileError) {
              console.error(`‚ùå Erro ao ler arquivo ${file}:`, fileError.message)
            }
          }
        }
      }
    }
    
    return allArchivedResults
  } catch (error) {
    console.error('‚ùå Erro ao ler resultados arquivados:', error)
    return []
  }
}

async function testAPILogicFixed() {
  try {
    console.log('üîç TESTANDO L√ìGICA DA API CORRIGIDA')
    console.log('=' .repeat(50))
    
    const userId = 'cmehdprxt00068wc0rz0enici' // colaborador@demo.com
    
    // 1. Buscar resultados do banco de dados
    console.log('\n1Ô∏è‚É£ BUSCANDO RESULTADOS DO BANCO DE DADOS')
    const testResults = await prisma.testResult.findMany({
      where: {
        userId: userId
      },
      include: {
        test: {
          include: {
            category: true
          }
        }
      }
    })
    
    console.log(`   Resultados no banco: ${testResults.length}`)
    
    // 2. Buscar resultados arquivados
    console.log('\n2Ô∏è‚É£ BUSCANDO RESULTADOS ARQUIVADOS')
    const archivedResults = readArchivedResults(userId)
    console.log(`   Resultados arquivados: ${archivedResults.length}`)
    
    // 3. Aplicar l√≥gica de deduplica√ß√£o (mesma da API corrigida)
    console.log('\n3Ô∏è‚É£ APLICANDO L√ìGICA DE DEDUPLICA√á√ÉO')
    
    // Criar um Set com os IDs dos resultados do banco de dados
    const dbResultIds = new Set(testResults.map(result => result.id))
    console.log(`   IDs no banco: ${Array.from(dbResultIds).join(', ')}`)
    
    // Filtrar resultados arquivados (apenas os que N√ÉO est√£o no banco)
    const uniqueArchivedResults = archivedResults.filter(archivedResult => {
      const isUnique = !dbResultIds.has(archivedResult.id)
      if (!isUnique) {
        console.log(`   üîÑ Removendo duplicata arquivada: ${archivedResult.id}`)
      }
      return isUnique
    })
    
    console.log(`   Resultados arquivados √∫nicos: ${uniqueArchivedResults.length}`)
    
    // 4. Combinar resultados
    console.log('\n4Ô∏è‚É£ COMBINANDO RESULTADOS')
    const totalCombined = testResults.length + uniqueArchivedResults.length
    console.log(`   Total no banco: ${testResults.length}`)
    console.log(`   Total arquivados √∫nicos: ${uniqueArchivedResults.length}`)
    console.log(`   Total combinado: ${totalCombined}`)
    
    // 5. Verificar se a corre√ß√£o funcionou
    console.log('\n5Ô∏è‚É£ VERIFICA√á√ÉO DA CORRE√á√ÉO')
    if (totalCombined === 8) {
      console.log('   ‚úÖ CORRE√á√ÉO FUNCIONOU! Total de resultados: 8 (sem duplicatas)')
    } else {
      console.log(`   ‚ùå AINDA H√Å PROBLEMA! Total de resultados: ${totalCombined}`)
    }
    
    console.log('\n' + '=' .repeat(50))
    console.log('‚úÖ Teste da l√≥gica da API conclu√≠do')
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAPILogicFixed()