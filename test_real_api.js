const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRealAPI() {
  try {
    console.log('=== TESTE DA API REAL ===\n');
    
    // 1. Buscar o usu√°rio colaborador@demo.com para obter o ID
    const user = await prisma.user.findUnique({
      where: { email: 'colaborador@demo.com' }
    });
    
    if (!user) {
      console.log('‚ùå Usu√°rio colaborador@demo.com n√£o encontrado');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.email} (ID: ${user.id})\n`);
    
    // 2. Fazer requisi√ß√£o para a API real
    console.log('üåê Fazendo requisi√ß√£o para a API real...');
    
    const apiUrl = 'http://localhost:3000/api/colaborador/resultados';
    const params = new URLSearchParams({
      page: '1',
      limit: '20'
    });
    
    const response = await fetch(`${apiUrl}?${params}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // Simular autentica√ß√£o - em produ√ß√£o seria um token JWT
        'x-user-id': user.id
      }
    });
    
    if (!response.ok) {
      console.log(`‚ùå Erro na API: ${response.status} - ${response.statusText}`);
      const errorText = await response.text();
      console.log('Resposta de erro:', errorText);
      return;
    }
    
    const data = await response.json();
    
    console.log(`üìä Status da resposta: ${response.status}`);
    console.log(`üìã Total de resultados retornados: ${data.results ? data.results.length : 'N/A'}`);
    
    if (data.results) {
      console.log('\n=== DETALHES DOS RESULTADOS DA API ===');
      data.results.forEach((result, index) => {
        console.log(`${index + 1}. ID: ${result.id} | T√≠tulo: ${result.title} | Data: ${result.completedAt}`);
      });
      
      // Verificar duplicatas
      const resultIds = data.results.map(r => r.id);
      const uniqueIds = new Set(resultIds);
      const hasDuplicates = resultIds.length !== uniqueIds.size;
      
      console.log(`\nüîç Verifica√ß√£o de duplicatas na resposta da API:`);
      console.log(`- Total de IDs: ${resultIds.length}`);
      console.log(`- IDs √∫nicos: ${uniqueIds.size}`);
      console.log(`- H√° duplicatas: ${hasDuplicates ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
      
      if (hasDuplicates) {
        const duplicateIds = resultIds.filter((id, index) => resultIds.indexOf(id) !== index);
        console.log(`- IDs duplicados: ${[...new Set(duplicateIds)].join(', ')}`);
      }
    }
    
    // Mostrar informa√ß√µes de pagina√ß√£o
    if (data.pagination) {
      console.log('\nüìÑ Informa√ß√µes de pagina√ß√£o:');
      console.log(`- P√°gina atual: ${data.pagination.currentPage}`);
      console.log(`- Total de p√°ginas: ${data.pagination.totalPages}`);
      console.log(`- Total de itens: ${data.pagination.totalItems}`);
      console.log(`- Itens por p√°gina: ${data.pagination.itemsPerPage}`);
    }
    
    // Mostrar estat√≠sticas
    if (data.statistics) {
      console.log('\nüìà Estat√≠sticas:');
      console.log(`- Total de testes: ${data.statistics.totalTests}`);
      console.log(`- Testes conclu√≠dos: ${data.statistics.completedTests}`);
      console.log(`- Taxa de conclus√£o: ${data.statistics.completionRate}%`);
    }
    
    console.log('\n=== CONCLUS√ÉO ===');
    const resultCount = data.results ? data.results.length : 0;
    
    if (resultCount === 16) {
      console.log('‚ö†Ô∏è  PROBLEMA CONFIRMADO: A API real est√° retornando 16 resultados!');
      console.log('Isso confirma que h√° um problema na API, n√£o no frontend.');
    } else if (resultCount === 8) {
      console.log('‚úÖ A API real est√° funcionando corretamente (8 resultados)');
      console.log('O problema dos 16 resultados deve estar no frontend ou cache.');
    } else {
      console.log(`ü§î A API retornou ${resultCount} resultados - n√∫mero inesperado.`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar API real:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3000');
    }
  } finally {
    await prisma.$disconnect();
  }
}

testRealAPI();