const { PrismaClient } = require('@prisma/client');

async function clearUserSessions() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Buscando sess√µes do usu√°rio colaborador@humaniq.com...');
    
    // Primeiro, encontrar o usu√°rio
    const user = await prisma.user.findUnique({
      where: {
        email: 'colaborador@humaniq.com'
      },
      include: {
        sessions: true,
        accounts: true
      }
    });
    
    if (!user) {
      console.log('‚ùå Usu√°rio colaborador@humaniq.com n√£o encontrado');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`);
    console.log(`üìä Sess√µes ativas: ${user.sessions.length}`);
    console.log(`üìä Contas vinculadas: ${user.accounts.length}`);
    
    // Remover todas as sess√µes do usu√°rio
    if (user.sessions.length > 0) {
      console.log('\nüóëÔ∏è Removendo sess√µes ativas...');
      const deletedSessions = await prisma.session.deleteMany({
        where: {
          userId: user.id
        }
      });
      console.log(`‚úÖ ${deletedSessions.count} sess√µes removidas`);
    }
    
    // Remover todas as contas OAuth vinculadas (se houver)
    if (user.accounts.length > 0) {
      console.log('\nüóëÔ∏è Removendo contas OAuth vinculadas...');
      const deletedAccounts = await prisma.account.deleteMany({
        where: {
          userId: user.id
        }
      });
      console.log(`‚úÖ ${deletedAccounts.count} contas OAuth removidas`);
    }
    
    // Verificar se h√° outros usu√°rios com email similar
    console.log('\nüîç Verificando usu√°rios com emails similares...');
    const similarUsers = await prisma.user.findMany({
      where: {
        OR: [
          { email: { contains: 'colaborador' } },
          { email: { contains: 'humaniq' } },
          { email: { contains: 'demo' } }
        ]
      },
      select: {
        id: true,
        email: true,
        _count: {
          select: {
            sessions: true,
            accounts: true
          }
        }
      }
    });
    
    console.log('\nüìã Usu√°rios encontrados:');
    similarUsers.forEach(u => {
      console.log(`- ${u.email}: ${u._count.sessions} sess√µes, ${u._count.accounts} contas`);
    });
    
    console.log('\n‚úÖ Limpeza de sess√µes conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar sess√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

clearUserSessions();