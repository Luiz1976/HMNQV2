#!/usr/bin/env node

/**
 * Script para verificar a configura√ß√£o da an√°lise grafol√≥gica com IA
 * Este script verifica se as vari√°veis de ambiente est√£o configuradas corretamente
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configura√ß√£o da an√°lise grafol√≥gica com IA...\n');

// Verificar arquivo .env
const envPath = path.join(__dirname, '.env');
let envConfig = {};

if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env encontrado');
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  // Parse vari√°veis de ambiente
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      envConfig[key.trim()] = value.trim();
    }
  });
} else {
  console.log('‚ö†Ô∏è Arquivo .env n√£o encontrado');
  console.log('   Copie .env.example para .env e configure as vari√°veis');
}

// Verificar chaves de API
console.log('\nüìä Configura√ß√£o das APIs:');

if (envConfig.GEMINI_API_KEY && envConfig.GEMINI_API_KEY !== 'your_google_gemini_api_key_here') {
  console.log('‚úÖ GEMINI_API_KEY configurada');
  console.log(`   Chave: ${envConfig.GEMINI_API_KEY.substring(0, 10)}...`);
} else {
  console.log('‚ùå GEMINI_API_KEY n√£o configurada ou usando valor padr√£o');
  console.log('   A an√°lise usar√° simula√ß√£o ao inv√©s de IA real');
}

if (envConfig.ABACUSAI_API_KEY && envConfig.ABACUSAI_API_KEY !== 'your_abacusai_api_key_here') {
  console.log('‚úÖ ABACUSAI_API_KEY configurada');
  console.log(`   Chave: ${envConfig.ABACUSAI_API_KEY.substring(0, 10)}...`);
} else {
  console.log('‚ö†Ô∏è ABACUSAI_API_KEY n√£o configurada (opcional)');
}

if (envConfig.NEXT_PUBLIC_APP_URL) {
  console.log('‚úÖ NEXT_PUBLIC_APP_URL configurada:', envConfig.NEXT_PUBLIC_APP_URL);
} else {
  console.log('‚ö†Ô∏è NEXT_PUBLIC_APP_URL n√£o configurada, usando padr√£o');
}

// Verificar arquivos de an√°lise
console.log('\nüìÅ Verificando arquivos do sistema:');

const requiredFiles = [
  'app/api/ai/graphology-analysis/route.ts',
  'app/api/ai/analyze/route.ts',
  'lib/ai/graphology-training.ts'
];

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} n√£o encontrado`);
  }
});

// Resumo
console.log('\nüéØ Resumo da configura√ß√£o:');
if (envConfig.GEMINI_API_KEY && envConfig.GEMINI_API_KEY !== 'your_google_gemini_api_key_here') {
  console.log('üöÄ An√°lise grafol√≥gica com IA REAL est√° ATIVADA');
  console.log('   ‚úÖ Usar√° Google Gemini API para an√°lises');
  console.log('   ‚úÖ An√°lises ser√£o baseadas em princ√≠pios cient√≠ficos');
  console.log('   ‚úÖ Scores personalizados para cada usu√°rio');
} else {
  console.log('‚ö†Ô∏è An√°lise grafol√≥gica com IA REAL est√° DESATIVADA');
  console.log('   ‚ùå Usar√° simula√ß√£o (valores padr√£o)');
  console.log('   ‚ùå Para ativar, configure GEMINI_API_KEY no arquivo .env');
}

console.log('\nüìã Pr√≥ximos passos:');
if (!envConfig.GEMINI_API_KEY || envConfig.GEMINI_API_KEY === 'your_google_gemini_api_key_here') {
  console.log('1. Obtenha uma chave de API do Google Gemini');
  console.log('2. Configure no arquivo .env: GEMINI_API_KEY=sua_chave_aqui');
  console.log('3. Reinicie o servidor: npm run dev');
}

console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');